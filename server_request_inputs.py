import datetime
import json
import os.path
import typing
from typing import List

import discord




class OwnRequest(discord.ui.View):
	def __init__(self,server_council_ids:List[int],author_id:int, queue_mode:bool=False, *args, **kwargs) -> None:
		self.queue_mode = queue_mode
		self.request_tmp_id = str(round(datetime.datetime.now().timestamp()))
		self.author_id = author_id
		super().__init__(timeout=None,*args, **kwargs)
		with open(f'tmp_requests/{self.request_tmp_id}.json' ,'w') as file:
			voting = {}
			for uid in server_council_ids:
				voting[str(uid)] = 0
			json.dump({"name":"",'comment':'','voting':voting,'public':True,'timestamp':round(datetime.datetime.now().timestamp())}, file)

	@discord.ui.button(label="–ù–∞–∑–≤–∞", style=discord.ButtonStyle.gray, emoji='‚úèÔ∏è')
	async def button_callback(self, button, interaction: discord.Interaction):
		if interaction.user.id == self.author_id:
			await interaction.response.send_modal(StrInput(self.request_tmp_id, 'name', self.message,200))
		else:
			await interaction.respond("–ü–æ–º–∏–ª–∫–∞! –¶–µ –∑–∞–ø–∏—Ç —ñ–Ω—à–æ—ó –ª—é–¥–∏–Ω–∏!",
			                          ephemeral=True)
	@discord.ui.button(label="–ö–æ–º–µ–Ω—Ç–∞—Ä", style=discord.ButtonStyle.gray,emoji='‚úèÔ∏è')
	async def button_callback3(self, button, interaction: discord.Interaction):
		if interaction.user.id == self.author_id:
			await interaction.response.send_modal(StrInput(self.request_tmp_id,'comment',self.message,1950))

		else:
			await interaction.respond("–ü–æ–º–∏–ª–∫–∞! –¶–µ –∑–∞–ø–∏—Ç —ñ–Ω—à–æ—ó –ª—é–¥–∏–Ω–∏!",
	                          ephemeral=True)
	@discord.ui.button(label="–ê–Ω–æ–Ω—ñ–º–Ω–∏–π/–≤—ñ–¥–æ–º–∏–π –∞–≤—Ç–æ—Ä", style=discord.ButtonStyle.gray,emoji='üëÅÔ∏è', custom_id='public_button')
	async def button_callback4(self, button, interaction: discord.Interaction):
		if interaction.user.id == self.author_id:

			with open(f'tmp_requests/{self.request_tmp_id}.json', 'r') as file:
				request = json.loads(file.read())

			if request['public']:
				request['public']=False
			else:
				request['public']=True

			with open(f'tmp_requests/{self.request_tmp_id}.json', 'w') as file:
				json.dump(request, file)

			or_embed: discord.Embed = self.message.embeds[0]
			i = -1
			for f in or_embed.fields:
				i += 1
				if f.name == 'public':
					or_embed.set_field_at(i, name='public', value="üôã –ü–æ–∫–∞–∑–∞—Ç–∏ –∞–≤—Ç–æ—Ä–∞ –∑–∞–ø–∏—Ç—É"if request['public'] else "ü•∑ –ù–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –∞–≤—Ç–æ—Ä–∞ –∑–∞–ø–∏—Ç—É")

			await self.message.edit(embeds=[or_embed])
			await interaction.respond(f"–£—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –∞–Ω–æ–Ω—ñ–º–Ω—ñ—Å—Ç—å!", ephemeral=True)

		else:
			await interaction.respond("–ü–æ–º–∏–ª–∫–∞! –¶–µ –∑–∞–ø–∏—Ç —ñ–Ω—à–æ—ó –ª—é–¥–∏–Ω–∏!",
	                          ephemeral=True)
	@discord.ui.button(label="–ì–æ—Ç–æ–≤–æ", style=discord.ButtonStyle.green,emoji='‚úÖ')
	async def button_callback2(self, button, interaction: discord.Interaction):
		if interaction.user.id==self.author_id:

			with open(f'tmp_requests/{self.request_tmp_id}.json', 'r') as file:
				request = json.loads(file.read())

			os.remove(f'tmp_requests/{self.request_tmp_id}.json')

			request_name =request['name']

			if request['comment']=='':
				await interaction.respond("–í–∏ –Ω–µ –≤–≤–µ–ª–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞–ø–∏—Ç—É, –≤–≤–µ–¥—ñ—Ç—å —Ç—É–¥–∏ –≤–∞—à—É —ñ–¥–µ—é —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–Ω–µ—Å—Ç–∏ –≤ —Ä–∞–¥—É —Å–µ—Ä–≤–µ—Ä—É!", ephemeral=True)
			elif request_name!='' and not os.path.exists(f'server_requests/{request_name}.json') and not os.path.exists(f'requests_queue/{request_name}.json'):
				del(request['name'])
				self.disable_all_items()
				await self.message.edit(view=self)
				request['author_id'] = interaction.user.id
				request['timestamp'] = round(datetime.datetime.now().timestamp())
				if not self.queue_mode:
					with open(f'server_requests/{request_name}.json' ,'w') as file:
						json.dump(request, file)


					with open(f'data/last_requests.json' ,'r') as file:
						last_requests = json.loads(file.read())

					last_requests[str(interaction.user.id)]= round(datetime.datetime.now().timestamp())


					with open(f'data/last_requests.json' ,'w') as file:
						json.dump(last_requests, file)
					await interaction.respond("–ó–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ! –ß–µ–∫–∞–π—Ç–µ –Ω–∞ –π–æ–≥–æ –ø—Ä–∏–π–Ω—è—Ç—Ç—è —Ä–∞–¥–æ—é —Å–µ—Ä–≤–µ—Ä—É")
				else:
					with open(f'requests_queue/{request_name}.json' ,'w') as file:
						json.dump(request, file)
					await interaction.respond("–ó–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ! –ô–æ–≥–æ –¥–æ–¥–∞–Ω–æ —É –≤–∞—à—É —á–µ—Ä–≥—É –Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ —É —Ä–∞–¥—É. –ú–æ–∂–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –ø–æ 1 –∑–∞–ø–∏—Ç—É –Ω–∞ –¥–µ–Ω—å")




			else:
				await interaction.respond("–ü–æ–º–∏–ª–∫–∞! –í–∏ –∞–±–æ –Ω–µ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤—É –∑–∞–ø–∏—Ç—É –∞–±–æ –∑–∞–ø–∏—Ç –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î!", ephemeral=True)
		else:
			await interaction.respond("–ü–æ–º–∏–ª–∫–∞! –¶–µ –∑–∞–ø–∏—Ç —ñ–Ω—à–æ—ó –ª—é–¥–∏–Ω–∏!",
			                          ephemeral=True)

class RolesChange(discord.ui.View):
	def __init__(self,server_council_ids:List[int],author_id:int,roles_nums, queue_mode:bool=False, *args, **kwargs) -> None:
		self.queue_mode = queue_mode
		self.roles_nums: typing.Dict[int,int] = roles_nums
		self.request_tmp_id = str(round(datetime.datetime.now().timestamp()))
		self.author_id = author_id
		super().__init__(timeout=None,*args, **kwargs)
		with open(f'tmp_requests/{self.request_tmp_id}.json' ,'w') as file:
			voting = {}
			for uid in server_council_ids:
				voting[str(uid)] = 0
			json.dump({"add_roles":"",'remove_roles':'','target':'','public':True,'voting':voting,'timestamp':round(datetime.datetime.now().timestamp())}, file)

	@discord.ui.button(label="–î–æ–¥–∞—Ç–∏ —Ä–æ–ª—ñ", style=discord.ButtonStyle.gray, emoji='‚úèÔ∏è')
	async def button_callback(self, button, interaction: discord.Interaction):
		if interaction.user.id == self.author_id:
			await interaction.response.send_modal(StrInput(self.request_tmp_id, 'add_roles', self.message,4000,self.roles_nums))
		else:
			await interaction.respond("–ü–æ–º–∏–ª–∫–∞! –¶–µ –∑–∞–ø–∏—Ç —ñ–Ω—à–æ—ó –ª—é–¥–∏–Ω–∏!",
			                          ephemeral=True)
	@discord.ui.button(label="–ó–∞–±—Ä–∞—Ç–∏ —Ä–æ–ª—ñ", style=discord.ButtonStyle.gray,emoji='‚úèÔ∏è')
	async def button_callback3(self, button, interaction: discord.Interaction):
		if interaction.user.id == self.author_id:
			await interaction.response.send_modal(StrInput(self.request_tmp_id,'remove_roles',self.message,4000,self.roles_nums))

		else:
			await interaction.respond("–ü–æ–º–∏–ª–∫–∞! –¶–µ –∑–∞–ø–∏—Ç —ñ–Ω—à–æ—ó –ª—é–¥–∏–Ω–∏!",
	                          ephemeral=True)
	@discord.ui.button(label="–£ –∫–æ–≥–æ", style=discord.ButtonStyle.gray,emoji='‚úèÔ∏è')
	async def button_callback4(self, button, interaction: discord.Interaction):
		if interaction.user.id == self.author_id:
			await interaction.response.send_modal(StrInput(self.request_tmp_id,'target',self.message,100))

		else:
			await interaction.respond("–ü–æ–º–∏–ª–∫–∞! –¶–µ –∑–∞–ø–∏—Ç —ñ–Ω—à–æ—ó –ª—é–¥–∏–Ω–∏!",
	                          ephemeral=True)
	@discord.ui.button(label="–ê–Ω–æ–Ω—ñ–º–Ω–∏–π/–≤—ñ–¥–æ–º–∏–π –∞–≤—Ç–æ—Ä", style=discord.ButtonStyle.gray,emoji='üëÅÔ∏è')
	async def button_callback5(self, button, interaction: discord.Interaction):
		if interaction.user.id == self.author_id:

			with open(f'tmp_requests/{self.request_tmp_id}.json', 'r') as file:
				request = json.loads(file.read())

			if request['public']:
				request['public']=False
			else:
				request['public']=True

			with open(f'tmp_requests/{self.request_tmp_id}.json', 'w') as file:
				json.dump(request, file)
		else:
			await interaction.respond("–ü–æ–º–∏–ª–∫–∞! –¶–µ –∑–∞–ø–∏—Ç —ñ–Ω—à–æ—ó –ª—é–¥–∏–Ω–∏!",
	                          ephemeral=True)
	@discord.ui.button(label="–ì–æ—Ç–æ–≤–æ", style=discord.ButtonStyle.green,emoji='‚úÖ')
	async def button_callback2(self, button, interaction: discord.Interaction):
		if interaction.user.id==self.author_id:

			with open(f'tmp_requests/{self.request_tmp_id}.json', 'r') as file:
				request = json.loads(file.read())

			os.remove(f'tmp_requests/{self.request_tmp_id}.json')


			if request['add_roles']=='' and request['remove_roles']=='':
				await interaction.respond("–í–∏ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ —è–∫—ñ —Ä–æ–ª—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏!", ephemeral=True)
			else:
				self.disable_all_items()
				await self.message.edit(view=self)
				request['author_id'] = interaction.user.id
				request['timestamp'] = round(datetime.datetime.now().timestamp())
				with open(f'server_requests/–ó–∞–ø–∏—Ç {self.request_tmp_id}.json' ,'w') as file:
					json.dump(request, file)


				with open(f'data/last_requests.json' ,'r') as file:
					last_requests = json.loads(file.read())

				last_requests[str(interaction.user.id)]= round(datetime.datetime.now().timestamp())


				with open(f'data/last_requests.json' ,'w') as file:
					json.dump(last_requests, file)


				await interaction.respond("–ó–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ! –ß–µ–∫–∞–π—Ç–µ –Ω–∞ –π–æ–≥–æ –ø—Ä–∏–π–Ω—è—Ç—Ç—è —Ä–∞–¥–æ—é —Å–µ—Ä–≤–µ—Ä—É")
		else:
			await interaction.respond("–ü–æ–º–∏–ª–∫–∞! –¶–µ –∑–∞–ø–∏—Ç —ñ–Ω—à–æ—ó –ª—é–¥–∏–Ω–∏!",
			                          ephemeral=True)


class StrInput(discord.ui.Modal):
	def __init__(self,request_tmp_id:str,request_option:str,or_message : discord.Message,text_limit:int,roles_nums:typing.Dict[int,int] | None = None, *args, **kwargs) -> None:
		super().__init__(title=request_option,*args, **kwargs)
		self.roles_nums = roles_nums
		self.or_message = or_message
		self.request_tmp_id = request_tmp_id
		self.request_option = request_option

		self.add_item(discord.ui.InputText(label="–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç:", style=discord.InputTextStyle.long,max_length=text_limit))

	async def callback(self, interaction: discord.Interaction):
		with open(f'tmp_requests/{self.request_tmp_id}.json' ,'r') as file:
			server_request = json.loads(file.read())

		or_embed: discord.Embed = self.or_message.embeds[0]
		i=-1
		if self.request_option != 'comment':
			for f in or_embed.fields:
				i+=1
				if f.name==self.request_option:
					if f.name in ['add_roles','remove_roles']:
						all_nums = self.children[0].value.split(' ')
						roles_id = []
						for num in all_nums:
							roles_id.append(self.roles_nums[int(num)])

						server_request[self.request_option] = ""

						for role_id in roles_id:
							server_request[self.request_option] += str(role_id) + " "

						roles_str = ''
						for role_id in roles_id:
							roles_str+=f"\n{'+' if f.name=='add_roles' else '-'} <@&{role_id}>"
						or_embed.set_field_at(i, name=self.request_option, value=roles_str)
					elif f.name == 'target':
						try:
							member_id = interaction.guild.get_member_named(self.children[0].value.replace("@","")).id
							server_request[self.request_option] = member_id
							or_embed.set_field_at(i, name=self.request_option, value=f"<@{member_id}>")
						except:
							await interaction.respond(f"–ü–æ–º–∏–ª–∫–∞, –æ—Å–∫—ñ–ª—å–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω—ñ–∫–Ω–µ–π–º", ephemeral=True)
							return
					else:
						server_request[self.request_option] = self.children[0].value
						or_embed.set_field_at(i,name=self.request_option,value=self.children[0].value)
		else:
			server_request[self.request_option] = self.children[0].value
			or_embed.description=self.children[0].value
		with open(f'tmp_requests/{self.request_tmp_id}.json', 'w') as file:
			json.dump(server_request,file)
		await self.or_message.edit(embeds=[or_embed])
		await interaction.respond(f"–£—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ {self.request_option}!", ephemeral=True)
