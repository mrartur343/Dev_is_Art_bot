import json
import re
import sqlite3
import time

import discord
from discord import InputTextStyle
from discord.ext import commands, tasks
from discord.ui import Modal, InputText


class StrInput(discord.ui.Modal):
	def __init__(self, cog, interaction, *args, **kwargs):
		super().__init__(title='–ù–∞–ø–∏—à—ñ—Ç—å –ª–∏—Å—Ç –¥–ª—è –®–Ü',timeout=None,*args, **kwargs)
		self.cog = cog
		self.interaction = interaction

		self.message_input = InputText(
			label="–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
			style=InputTextStyle.paragraph,
			placeholder="–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...",
			required=True,
			max_length=2000
		)
		self.add_item(self.message_input)

	async def callback(self, interaction: discord.Interaction):
		msg = self.message_input.value
		self.cog.message_cursor.execute(
			"INSERT INTO messages (guild_id, user_id, username, message) VALUES (?, ?, ?, ?)",
			(interaction.guild.id, interaction.user.id, str(interaction.user), msg)
		)
		self.cog.message_db.commit()
		await interaction.respond("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!", ephemeral=True)


class ScheduledCommands(commands.Cog):
	def __init__(self, bot):
		self.bot = bot
		self.conn = sqlite3.connect('scheduled_commands.db')
		self.cursor = self.conn.cursor()
		self.cursor.execute('''
			CREATE TABLE IF NOT EXISTS scheduled_commands (
				id INTEGER PRIMARY KEY AUTOINCREMENT,
				guild_id INTEGER,
				channel_id INTEGER,
				timestamp INTEGER,
				command TEXT
			)
		''')
		self.conn.commit()

		self.var_db = sqlite3.connect("variables.db")
		self.var_cursor = self.var_db.cursor()
		self.var_cursor.execute('''
			CREATE TABLE IF NOT EXISTS variables (
				guild_id INTEGER,
				name TEXT,
				value TEXT,
				PRIMARY KEY (guild_id, name)
			)
		''')
		self.var_db.commit()

		self.message_db = sqlite3.connect("user_messages.db")
		self.message_cursor = self.message_db.cursor()

		self.message_cursor.execute('''
			CREATE TABLE IF NOT EXISTS messages (
				guild_id INTEGER,
				user_id INTEGER,
				username TEXT,
				message TEXT
			)
		''')
		self.message_db.commit()

		self.check_scheduled_commands.start()

	def cog_unload(self):
		self.check_scheduled_commands.cancel()
		self.conn.close()

	@tasks.loop(seconds=10)
	async def check_scheduled_commands(self):
		now = int(time.time())
		self.cursor.execute('SELECT id, guild_id, channel_id, command FROM scheduled_commands WHERE timestamp <= ?', (now,))
		rows = self.cursor.fetchall()

		for row in rows:
			cmd_id, guild_id, channel_id, command = row
			guild = self.bot.get_guild(guild_id)
			channel = guild.get_channel(channel_id) if guild else None
			if not channel:
				continue
			try:
				await self.execute_command(guild, channel, command)
			except Exception as e:
				await channel.send(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ `{command}`: {e}")
			self.cursor.execute('DELETE FROM scheduled_commands WHERE id = ?', (cmd_id,))
			self.conn.commit()

	async def execute_command(self, guild: discord.Guild, channel, command: str):
		args = command.split()
		if not args:
			await channel.send("–ü—É—Å—Ç–∞ –∫–æ–º–∞–Ω–¥–∞.")
			return

		action = args[0]
		match action:
			# --- –ö–∞–Ω–∞–ª–∏ ---
			case "create_text_channel":
				name = " ".join(args[1:])
				await guild.create_text_channel(name)
				await channel.send(f"–ö–∞–Ω–∞–ª `{name}` —Å—Ç–≤–æ—Ä–µ–Ω–æ.")

			case "create_voice_channel":
				name = " ".join(args[1:])
				await guild.create_voice_channel(name)
				await channel.send(f"–ö–∞–Ω–∞–ª `{name}` —Å—Ç–≤–æ—Ä–µ–Ω–æ.")

			case "create_info_channel":
				name = " ".join(args[1:])
			
				# –î–æ–∑–≤–æ–ª–∏: –≤—Å—ñ –Ω–µ –º–æ–∂—É—Ç—å –ø–∏—Å–∞—Ç–∏
				overwrite = {
					guild.default_role: discord.PermissionOverwrite(send_messages=False, view_channel=True),
				}
			
				# –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞–Ω–∞–ª –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º–∏
				info_channel = await guild.create_text_channel(name, overwrites=overwrite)
				await channel.send(f"‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π –∫–∞–Ω–∞–ª `{name}` —Å—Ç–≤–æ—Ä–µ–Ω–æ.")


			case "delete_channel":
				name = " ".join(args[1:])
				ch = discord.utils.get(guild.channels, name=name)
				if ch:
					await ch.delete()
					await channel.send(f"–ö–∞–Ω–∞–ª `{name}` –≤–∏–¥–∞–ª–µ–Ω–æ.")
				else:
					await channel.send(f"–ö–∞–Ω–∞–ª `{name}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

			case "rename_channel":
				old_name, new_name = args[1], args[2]
				ch = discord.utils.get(guild.channels, name=old_name)
				if ch:
					await ch.edit(name=new_name)
					await channel.send(f"–ö–∞–Ω–∞–ª `{old_name}` –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ –Ω–∞ `{new_name}`.")
				else:
					await channel.send(f"–ö–∞–Ω–∞–ª `{old_name}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

			case "set_channel_topic":
				ch_name = args[1]
				topic = " ".join(args[2:])
				ch = discord.utils.get(guild.channels, name=ch_name)
				if ch and isinstance(ch, discord.TextChannel):
					await ch.edit(topic=topic)
					await channel.send(f"–¢–µ–º–∞ –∫–∞–Ω–∞–ª—É `{ch_name}` –æ–Ω–æ–≤–ª–µ–Ω–∞.")
				else:
					await channel.send(f"–ö–∞–Ω–∞–ª `{ch_name}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–∏–π.")
			case "create_category":
				name = " ".join(args[1:])
				await guild.create_category(name)
				await channel.send(f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä—ñ—é `{name}` —Å—Ç–≤–æ—Ä–µ–Ω–æ.")

			case "move_channel":
				ch_name, cat_name = args[1], " ".join(args[2:])
				ch = discord.utils.get(guild.channels, name=ch_name)
				category = discord.utils.get(guild.categories, name=cat_name)
				if ch and category:
					await ch.edit(category=category)
					await channel.send(f"üìÇ –ö–∞–Ω–∞–ª `{ch_name}` –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó `{cat_name}`.")
				else:
					await channel.send("‚ùå –ö–∞–Ω–∞–ª –∞–±–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

			# --- –†–æ–ª—ñ ---
			case "create_role":
				name = " ".join(args[1:])
				await guild.create_role(name=name)
				await channel.send(f"–†–æ–ª—å `{name}` —Å—Ç–≤–æ—Ä–µ–Ω–æ.")

			case "delete_role":
				name = " ".join(args[1:])
				role = discord.utils.get(guild.roles, name=name)
				if role:
					await role.delete()
					await channel.send(f"–†–æ–ª—å `{name}` –≤–∏–¥–∞–ª–µ–Ω–æ.")
				else:
					await channel.send(f"–†–æ–ª—å `{name}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

			case "rename_role":
				old_name, new_name = args[1], args[2]
				role = discord.utils.get(guild.roles, name=old_name)
				if role:
					await role.edit(name=new_name)
					await channel.send(f"–†–æ–ª—å `{old_name}` –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ –Ω–∞ `{new_name}`.")
				else:
					await channel.send(f"–†–æ–ª—å `{old_name}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

			# --- –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ / —Ä–æ–ª—ñ ---
			case "add_role":
				member_name = args[1]
				role_name = args[2]
				member = discord.utils.find(lambda m: m.name == member_name, guild.members)
				role = discord.utils.get(guild.roles, name=role_name)
				if member and role:
					await member.add_roles(role)
					await channel.send(f"–†–æ–ª—å `{role_name}` –¥–æ–¥–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É `{member_name}`.")
				else:
					await channel.send(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ —Ä–æ–ª—ñ.")

			case "remove_role":
				member_name = args[1]
				role_name = args[2]
				member = discord.utils.find(lambda m: m.name == member_name, guild.members)
				role = discord.utils.get(guild.roles, name=role_name)
				if member and role:
					await member.remove_roles(role)
					await channel.send(f"–†–æ–ª—å `{role_name}` –≤–∏–¥–∞–ª–µ–Ω–æ –≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{member_name}`.")
				else:
					await channel.send(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ —Ä–æ–ª—ñ.")
			case "dm_user":
				target_name = args[1]
				msg = " ".join(args[2:])

				member = discord.utils.find(lambda m: m.name == target_name or m.display_name == target_name,
				                            guild.members)

				if member:
					try:
						await member.send(msg)
						await channel.send(f"üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {member.name}.")
					except discord.Forbidden:
						await channel.send("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ú–æ–∂–ª–∏–≤–æ, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–º–∫–Ω—É–≤ DM.")
				else:
					await channel.send(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{target_name}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

			# --- –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ---
			case "send_message":
				if len(args) < 3:
					await channel.send("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: send_message –ù–∞–∑–≤–∞–ö–∞–Ω–∞–ª—É –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
					return

				target_channel_name = args[1]
				raw_message = " ".join(args[2:])

				# –ü–æ—à—É–∫ –∫–∞–Ω–∞–ª—É –∑–∞ –Ω–∞–∑–≤–æ—é
				target_channel = discord.utils.get(guild.text_channels, name=target_channel_name)
				if not target_channel:
					await channel.send(f"‚ùå –ö–∞–Ω–∞–ª `{target_channel_name}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
					return

				# –ü—ñ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö –∑ –±–∞–∑–∏
				self.var_cursor.execute("SELECT name, value FROM variables WHERE guild_id = ?", (guild.id,))
				variables = dict(self.var_cursor.fetchall())

				for key, value in variables.items():
					raw_message = raw_message.replace(f"{{{key}}}", value)

				await target_channel.send(raw_message)
				await channel.send(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–æ –∫–∞–Ω–∞–ª—É `{target_channel_name}`.")
			# --- –°–µ—Ä–≤–µ—Ä ---
			case "change_server_name":
				new_name = " ".join(args[1:])
				await guild.edit(name=new_name)
				await channel.send(f"–ù–∞–∑–≤—É —Å–µ—Ä–≤–µ—Ä–∞ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ `{new_name}`.")
			case "set_variable":
				if len(args) < 3:
					await channel.send("‚ùå –§–æ—Ä–º–∞—Ç: `set_variable –Ω–∞–∑–≤–∞ –∑–Ω–∞—á–µ–Ω–Ω—è`")
					return

				var_name = args[1]
				var_value = " ".join(args[2:])
				self.var_cursor.execute('''
					INSERT INTO variables (guild_id, name, value)
					VALUES (?, ?, ?)
					ON CONFLICT(guild_id, name) DO UPDATE SET value = excluded.value
				''', (guild.id, var_name, var_value))
				self.var_db.commit()
				await channel.send(f"‚úÖ –ó–º—ñ–Ω–Ω—É `{var_name}` –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ `{var_value}`.")

			case _:
				await channel.send(f"–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: `{command}`")
	@commands.has_permissions(administrator=True)
	@discord.slash_command(name="upload_json", description="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ JSON —Ñ–∞–π–ª –∑ –∫–æ–º–∞–Ω–¥–∞–º–∏")
	async def upload_json(self, ctx: discord.ApplicationContext, file: discord.Attachment):
		if not file.filename.endswith(".json"):
			await ctx.respond("–§–∞–π–ª –º–∞—î –±—É—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ .json", ephemeral=True)
			return

		try:
			file_bytes = await file.read()
			data = json.loads(file_bytes.decode("utf-8"))

			inserted = 0
			for timestamp_str, command in data.items():
				try:
					timestamp = int(timestamp_str)
					self.cursor.execute('''
						INSERT INTO scheduled_commands (guild_id, channel_id, timestamp, command)
						VALUES (?, ?, ?, ?)
					''', (ctx.guild.id, ctx.channel.id, timestamp, command))
					inserted += 1
				except Exception as e:
					await ctx.channel.send(f"–ü–æ–º–∏–ª–∫–∞ –¥–ª—è `{command}`: {e}")

			self.conn.commit()
			await ctx.respond(f"–£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ {inserted} –∫–æ–º–∞–Ω–¥ –∑ JSON.", ephemeral=True)

		except Exception as e:
			await ctx.respond(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É: {e}", ephemeral=True)

	@commands.has_permissions(administrator=True)
	@discord.slash_command(name="list_items", description="–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∫–∞–Ω–∞–ª–∏ —Ç–∞ —Ä–æ–ª—ñ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ")
	async def list_items(self, ctx: discord.ApplicationContext):
		guild = ctx.guild
	
		# –ö–∞–Ω–∞–ª–∏
		channel_names = [channel.name for channel in guild.channels]
		channel_list = ", ".join(channel_names) if channel_names else "–ù–µ–º–∞—î –∫–∞–Ω–∞–ª—ñ–≤"
	
		# –†–æ–ª—ñ
		role_names = [role.name for role in guild.roles if role.name != "@everyone"]
		role_list = ", ".join(role_names) if role_names else "–ù–µ–º–∞—î —Ä–æ–ª–µ–π"
	
		# –ó–º—ñ–Ω–Ω—ñ
		self.var_cursor.execute('SELECT name, value FROM variables WHERE guild_id = ?', (guild.id,))
		variables = self.var_cursor.fetchall()
		if variables:
			var_list = ", ".join(f"{name} = {value}" for name, value in variables)
		else:
			var_list = "–ù–µ–º–∞—î –∑–º—ñ–Ω–Ω–∏—Ö"
	
		embed = discord.Embed(title="üìã –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —Å–µ—Ä–≤–µ—Ä–∞", color=discord.Color.blurple())
		embed.add_field(name="–ö–∞–Ω–∞–ª–∏", value=channel_list, inline=False)
		embed.add_field(name="–†–æ–ª—ñ", value=role_list, inline=False)
		embed.add_field(name="–ó–º—ñ–Ω–Ω—ñ", value=var_list, inline=False)
	
		await ctx.respond(embed=embed, ephemeral=True)

	@commands.has_permissions(administrator=True)
	@discord.slash_command(name="view_scheduled", description="–í—Å—ñ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –∫–æ–º–∞–Ω–¥–∏")

	async def view_scheduled(self, ctx: discord.ApplicationContext):
		# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∞–¥–º—ñ–Ω

	
		self.cursor.execute('''
			SELECT timestamp, command, channel_id FROM scheduled_commands
			WHERE guild_id = ?
			ORDER BY timestamp ASC
		''', (ctx.guild.id,))
		rows = self.cursor.fetchall()
	
		if not rows:
			await ctx.respond("üîç –ù–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å.", ephemeral=True)
			return
	
		lines = []
		for ts, cmd, ch_id in rows:
			lines.append(f"‚Ä¢ ‚è∞ <t:{ts}:F> –≤ <#{ch_id}> ‚Äî `{cmd}`")
	
		embed = discord.Embed(
			title="üìÖ –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è",
			description="\n".join(lines),
			color=discord.Color.green()
		)
	
		await ctx.respond(embed=embed, ephemeral=True)
	@commands.has_permissions(administrator=True)
	@discord.slash_command(name="view_submitted", description="–í—Å—ñ –æ—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è")

	async def view_submitted(self, ctx: discord.ApplicationContext):

		self.message_cursor.execute(
			"SELECT username, message FROM messages WHERE guild_id = ?", (ctx.guild.id,))
		messages = self.message_cursor.fetchall()

		if not messages:
			await ctx.respond("–ù–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.", ephemeral=True)
			return

		text = "\n".join([f"**{user}** ‚Äî {msg}" for user, msg in messages])
		embed = discord.Embed(title="üì® –ù–∞–¥—ñ—Å–ª–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", description=text[:4000], color=discord.Color.blue())

		await ctx.respond(embed=embed, ephemeral=True)

	@discord.slash_command(name="submit_message", description="–ù–∞–ø–∏—Å–∞—Ç–∏ –®–Ü –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –¶–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è, —á–∏ –ø–∏—Ç–∞–Ω–Ω—è, —á–∏ —ñ–¥–µ—è")
	async def submit_message(self,  ctx: discord.ApplicationContext):
		await ctx.send_modal(StrInput(self, ctx.interaction))
def setup(bot):  # this is called by Pycord to setup the cog
	bot.add_cog(ScheduledCommands(bot))  # add the cog to the bot
